# Database Application - Airbnb Project 

****ΣΥΝΔΕΣΜΟΣ ΣΥΝΟΜΙΛΙΑΣ ΓΙΑ ΤΙΣ ΣΥΝΑΡΤΗΣΕΙΣ :  https://chatgpt.com/share/682a31d6-4fd0-8006-9b08-248795a9c0e7


## Function Modifications

### 1. `checkIfPropertyExists`

**Αλλαγές:**

* Αντικαταστάθηκε η επιστροφή της συνάρτησης από απλό string (`"yes"`, `"no"`) σε λίστα πλειάδων (`[('yes',)]`, `[('no',)]`), όπως απαιτείται από την εκφώνηση για συμβατότητα με το Bottle framework.
* Αφαιρέθηκε η χρήση του `COUNT(*) > 0` και αντικαταστάθηκε με `COUNT(*)` για να αποφύγουμε το boolean αποτέλεσμα, το οποίο δεν επιτρέπεται στις οδηγίες.
* Το ερώτημα αναδιαμορφώθηκε για να χρησιμοποιήσει απλές ενώσεις, αποφεύγοντας την απαγορευμένη `JOIN` σύνταξη.

### 2. `selectTopNhosts`

**Αλλαγές:**

* Αντικαταστάθηκε η σύνταξη με `GROUP BY` και `ORDER BY` με έναν αναλυτικό μηχανισμό για την εύρεση των top N hosts για κάθε τύπο καταλύματος, αποφεύγοντας την απαγορευμένη χρήση `LIMIT` και `JOIN`.
* Προστέθηκε έλεγχος για άδεια property sets, ώστε να μην εκτελούνται περιττά queries.
* Χρησιμοποιήθηκε `sorted()` με slicing για την επιλογή των top N ιδιοκτητών, διατηρώντας τη σειρά φθίνουσας κατάταξης.
* Προστέθηκε explicit conversion του `N` σε ακέραιο για αποφυγή σφαλμάτων.

### 3. `findMatchingProperties`

**Αλλαγές:**

* Αντικαταστάθηκε η χρήση `JOIN` με αναλυτικά queries για τη συλλογή δεδομένων, αποφεύγοντας τις απαγορευμένες συνδέσεις.
* Προστέθηκε πιο αποδοτική διαχείριση αποκλεισμένων hosts με τη χρήση sets για ταχύτερους ελέγχους.
* Μετακινήθηκε το φιλτράρισμα των αποκλεισμένων hosts από το SQL ερώτημα στον Python κώδικα για καλύτερη απόδοση.
* Χρησιμοποιήθηκε λεξικό (`property_host_map`) για πιο γρήγορη αναζήτηση hosts ανά property.

### 4. `countWordsForProperties`

**Αλλαγές:**

* Επανασχεδιάστηκε η λογική φιλτραρίσματος ιδιοτήτων για να αποφεύγονται πολλαπλά nested queries και απαγορευμένα `JOIN`.
* Προστέθηκε η χρήση λεξικών (`guests_per_property`, `property_host_map`) για ταχύτερη ανάκτηση δεδομένων χωρίς πολλαπλές βάσεις δεδομένων queries.
* Αφαιρέθηκε η χρήση της εντολής `GROUP BY` και `HAVING` για να είναι συμβατό με τις οδηγίες της εκφώνησης.
* Ενσωματώθηκε πιο αποδοτικός μηχανισμός φιλτραρίσματος stop words και υπολογισμού συχνότητας λέξεων στις κριτικές.
* Η επεξεργασία των σχολίων (reviews) έγινε αποκλειστικά σε Python, χρησιμοποιώντας regular expressions (`re`) και counters (`Counter`), για να αποφευχθούν περιττές βάσεις δεδομένων queries και να βελτιωθεί η απόδοση.

### 5. `findCommonPropertiesAndGuests`

**Αλλαγές:**

* Αφαιρέθηκε η χρήση του `JOIN` από τα SQL queries για να αποφευχθούν οι απαγορεύσεις της εκφώνησης και βελτιώθηκε η λογική αναζήτησης μεμονωμένων επισκεπτών.
* Χρησιμοποιήθηκε set-based φιλτράρισμα σε Python (`set.discard()`) για να αφαιρούνται τα guest\_id a και b χωρίς επιπλέον queries.
* Προστέθηκε μηχανισμός για αποφυγή διπλοτύπων μέσω set (`checked_pairs`) για να αποφευχθούν επαναλαμβανόμενες εγγραφές.
* Μεταφέρθηκε ο έλεγχος για κοινά properties μεταξύ επισκεπτών σε Python για καλύτερη απόδοση και ευελιξία στη διαχείριση των αποτελεσμάτων.

### 6. `highValueHost`

**Αλλαγές:**

* Αντικαταστάθηκε η χρήση `GROUP BY` και nested SQL queries με Python dictionaries για την αποδοτικότερη διαχείριση των στατιστικών των hosts.
* Προστέθηκε έλεγχος για μη έγκυρα input parameters με χρήση του `Decimal()` για πιο αξιόπιστο χειρισμό αριθμητικών τιμών.
* Χρησιμοποιήθηκε σύστημα συλλογής δεδομένων (`host_prices`, `host_ratings`, `host_counts`) για πιο αποδοτικό υπολογισμό μέσων όρων τιμής και βαθμολογίας, αποφεύγοντας τα πολλαπλά queries.
* Αφαιρέθηκε η χρήση του `JOIN` στα τελικά ερωτήματα για την εύρεση των δημοφιλέστερων παροχών, και αντ' αυτού χρησιμοποιήθηκαν λεξικά (`amenity_id_to_name`) για γρήγορη αντιστοίχιση.

### 7. `recommendProperty`

**Αλλαγές:**

* Προστέθηκε έλεγχος για μη έγκυρη μορφή των `desired_amenities` με χρήση του `json.loads()` για ευελιξία στο input.
* Αντικαταστάθηκε η λογική επιλογής καταλύματος με βαθμολόγηση μέσω Python και λεξικά για αποδοτικότερο υπολογισμό των weighted scores.
* Αφαιρέθηκε η χρήση nested queries για τα amenities και αντικαταστάθηκε με bulk queries για καλύτερη απόδοση.
* Χρησιμοποιήθηκε λίστα με ταξινόμηση για την επιλογή του καταλύματος με την υψηλότερη βαθμολογία, αποφεύγοντας πολλαπλά loops και queries.
